# 1 "samples/qbittorrent/wpmin/asyncfilestorage.cpp"
# 29 "samples/qbittorrent/wpmin/asyncfilestorage.cpp"
#include "asyncfilestorage.h"

#include <QDebug>
#include <QMetaObject>

#include "base/utils/fs.h"
#include "base/utils/io.h"

AsyncFileStorage::AsyncFileStorage(const Path &storageFolderPath, QObject *parent)
    : QObject(parent)
    , m_storageDir(storageFolderPath)
    , m_lockFile((m_storageDir / Path(u"storage.lock"_qs)).data())
{
    Q_ASSERT(m_storageDir.isAbsolute());

    if (!Utils::Fs::mkpath(m_storageDir))
        throw AsyncFileStorageError(tr("Could not create directory '%1'.").arg(m_storageDir.toString()));


    if (!m_lockFile.open(QFile::WriteOnly))
        throw AsyncFileStorageError(m_lockFile.errorString());
}

AsyncFileStorage::~AsyncFileStorage()
{
    m_lockFile.close();
    m_lockFile.remove();
}

void AsyncFileStorage::store(const Path &filePath, const QByteArray &data)
{
    QMetaObject::invokeMethod(this, [this, data, filePath]() { store_impl(filePath, data); }
                              , Qt::QueuedConnection);
}

Path AsyncFileStorage::storageDir() const
{
    return m_storageDir;
}

void AsyncFileStorage::store_impl(const Path &fileName, const QByteArray &data)
{
    const Path filePath = m_storageDir / fileName;
    qDebug() << "AsyncFileStorage: Saving data to" << filePath.toString();

    const nonstd::expected<void, QString> result = Utils::IO::saveToFile(filePath, data);
    if (!result)
    {
        qDebug() << "AsyncFileStorage: Failed to save data";
        emit failed(filePath, result.error());
    }
}
